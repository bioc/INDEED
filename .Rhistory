y
}
y <- c(0, 1, 0, 1, 10, 10, 10, 1, 0, 1)
y_IA <- IA(y)
y_IA
y_copy <- IA_loop(y_IA)
y_copy
n <- length(y_IA)
y_max <- y_IA
for (i in 1:n) {
y_max[i] <- max(y_copy[i], y_IA[i])
}
y_max
y_min <- y_IA
for (i in 1:n) {
y_min[i] <- min(y_max[i], y_IA[i])
}
y_min
y_diff <- abs(y_max - y_min)
y_diff
which(y_diff == 0)
x <- 1:10
y <- rnorm(10)
par(mfrow = c(2,1))
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 10, col = "green")
points(x, y)
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
x <- c(2,2:4,4,4,5,5,7,7,7)
y <- c(1:6, 5:4, 3:1)
approx(x,y, xout=x)$y # warning
(ay <- approx(x,y, xout=x, ties = "ordered")$y)
stopifnot(ay == c(2,2,3,6,6,6,4,4,1,1,1))
approx(x,y, xout=x, ties = min)$y
approx(x,y, xout=x, ties = max)$y
x <- c(2,2:4,4,4,5,5,7,7,7)
y <- c(1:6, 5:4, 3:1)
approx(x,y, xout=x)$y # warning
approx(x,y) # warning
lambda <- 2:10
n <- 5
colors <- rainbow(n)
colors
par(mfrow = c(1, 1))
par(mar = c(5, 5, 5, 5))
p_001 <- c(0.816905, 0.858333, 0.894524, 0.930238, 0.935238, 0.93381, 0.920714, 0.915952, 0.91619)
plot(lambda, p_001, pch = 8, col = colors[1], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_001, col = colors[1], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_002 <- c(0.81, 0.848095, 0.885714, 0.929762, 0.932857, 0.931429, 0.923571, 0.926429, 0.920238)
par(new = TRUE)
plot(lambda, p_002, pch = 8, col = colors[2], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_002, col = colors[2], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_004 <- c(0.795, 0.850238, 0.879524, 0.924286, 0.93881, 0.94, 0.925238, 0.91881, 0.916667)
par(new = TRUE)
plot(lambda, p_004, pch = 8, col = colors[3], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_004, col = colors[3], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_008 <- c(0.774048, 0.84619, 0.87381, 0.919286, 0.94119, 0.937381, 0.933095, 0.925714, 0.919762)
par(new = TRUE)
plot(lambda, p_008, pch = 8, col = colors[4], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_008, col = colors[4], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_016 <- c(0.732619, 0.835, 0.861905, 0.907381, 0.94119, 0.940952, 0.935476, 0.930952, 0.925714)
par(new = TRUE)
plot(lambda, p_016, pch = 8, col = colors[5], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_016, col = colors[5], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
degree <- 1:15
acc <- c(0.906667, 0.925, 0.930238, 0.918333, 0.930952, 0.930238, 0.930476, 0.942619, 0.930714, 0.940238,
0.92119, 0.927143, 0.92, 0.93119, 0.929762)
par(new = TRUE)
plot(degree, acc, pch = 2, col = "black", lwd = 2, cex.lab = 1.5, cex.axis = 1.5, axes = F,
ylab = NA, xlab = NA, ylim = c(0.7, 0.95))
axis(side = 3, cex.lab = 1.5, cex.axis = 1.5)
mtext(side = 3, line = 3, text = "Degree", cex = 1.5)
lines(degree, acc, lty = "dashed", col = "black", lwd = 2, xlab = NA, ylab = NA, ylim = c(0.7, 0.95))
legend(x = 8, y = 0.8, legend = c("ALS p=0.01", "ALS p=0.02", "ALS p=0.04", "ALS p=0.08", "ALS p=0.16", "ModPoly"),
lwd = 2, col = c(colors[1:5], "black"), pch = c(rep(8, 5), 2), lty = c(rep("solid", 5), "dashed"),
cex = 1.5, bty = "n")
lambda <- 2:10
n <- 6
colors <- rainbow(n)
colors
par(mfrow = c(1, 1))
par(mar = c(5, 5, 5, 5))
p_001 <- c(0.816905, 0.858333, 0.894524, 0.930238, 0.935238, 0.93381, 0.920714, 0.915952, 0.91619)
plot(lambda, p_001, pch = 8, col = colors[1], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_001, col = colors[1], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_002 <- c(0.81, 0.848095, 0.885714, 0.929762, 0.932857, 0.931429, 0.923571, 0.926429, 0.920238)
par(new = TRUE)
plot(lambda, p_002, pch = 8, col = colors[2], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_002, col = colors[2], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_004 <- c(0.795, 0.850238, 0.879524, 0.924286, 0.93881, 0.94, 0.925238, 0.91881, 0.916667)
par(new = TRUE)
plot(lambda, p_004, pch = 8, col = colors[3], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_004, col = colors[3], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_008 <- c(0.774048, 0.84619, 0.87381, 0.919286, 0.94119, 0.937381, 0.933095, 0.925714, 0.919762)
par(new = TRUE)
plot(lambda, p_008, pch = 8, col = colors[4], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_008, col = colors[4], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_016 <- c(0.732619, 0.835, 0.861905, 0.907381, 0.94119, 0.940952, 0.935476, 0.930952, 0.925714)
par(new = TRUE)
plot(lambda, p_016, pch = 8, col = colors[5], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_016, col = colors[5], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
degree <- 1:15
acc <- c(0.906667, 0.925, 0.930238, 0.918333, 0.930952, 0.930238, 0.930476, 0.942619, 0.930714, 0.940238,
0.92119, 0.927143, 0.92, 0.93119, 0.929762)
par(new = TRUE)
plot(degree, acc, pch = 2, col = colors[6], lwd = 2, cex.lab = 1.5, cex.axis = 1.5, axes = F,
ylab = NA, xlab = NA, ylim = c(0.7, 0.95))
axis(side = 3, cex.lab = 1.5, cex.axis = 1.5)
mtext(side = 3, line = 3, text = "Degree", cex = 1.5)
lines(degree, acc, lty = "dashed", col = colors[6], lwd = 2, xlab = NA, ylab = NA, ylim = c(0.7, 0.95))
length(lambda)
rep(0.897143, length(lambda))
lambda <- 2:10
n <- 6
colors <- rainbow(n)
colors
par(mfrow = c(1, 1))
par(mar = c(5, 5, 5, 5))
p_001 <- c(0.816905, 0.858333, 0.894524, 0.930238, 0.935238, 0.93381, 0.920714, 0.915952, 0.91619)
plot(lambda, p_001, pch = 8, col = colors[1], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_001, col = colors[1], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_002 <- c(0.81, 0.848095, 0.885714, 0.929762, 0.932857, 0.931429, 0.923571, 0.926429, 0.920238)
par(new = TRUE)
plot(lambda, p_002, pch = 8, col = colors[2], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_002, col = colors[2], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_004 <- c(0.795, 0.850238, 0.879524, 0.924286, 0.93881, 0.94, 0.925238, 0.91881, 0.916667)
par(new = TRUE)
plot(lambda, p_004, pch = 8, col = colors[3], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_004, col = colors[3], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_008 <- c(0.774048, 0.84619, 0.87381, 0.919286, 0.94119, 0.937381, 0.933095, 0.925714, 0.919762)
par(new = TRUE)
plot(lambda, p_008, pch = 8, col = colors[4], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_008, col = colors[4], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_016 <- c(0.732619, 0.835, 0.861905, 0.907381, 0.94119, 0.940952, 0.935476, 0.930952, 0.925714)
par(new = TRUE)
plot(lambda, p_016, pch = 8, col = colors[5], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_016, col = colors[5], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
degree <- 1:15
acc <- c(0.906667, 0.925, 0.930238, 0.918333, 0.930952, 0.930238, 0.930476, 0.942619, 0.930714, 0.940238,
0.92119, 0.927143, 0.92, 0.93119, 0.929762)
par(new = TRUE)
plot(degree, acc, pch = 2, col = colors[6], lwd = 2, cex.lab = 1.5, cex.axis = 1.5, axes = F,
ylab = NA, xlab = NA, ylim = c(0.7, 0.95))
axis(side = 3, cex.lab = 1.5, cex.axis = 1.5)
mtext(side = 3, line = 3, text = "Degree", cex = 1.5)
lines(degree, acc, lty = "dashed", col = colors[6], lwd = 2, xlab = NA, ylab = NA, ylim = c(0.7, 0.95))
par(new = TRUE)
lines(degree, rep(0.897143, length(degree)), col = "black", lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
lambda <- 2:10
n <- 6
colors <- rainbow(n)
colors
par(mfrow = c(1, 1))
par(mar = c(5, 5, 5, 5))
p_001 <- c(0.816905, 0.858333, 0.894524, 0.930238, 0.935238, 0.93381, 0.920714, 0.915952, 0.91619)
plot(lambda, p_001, pch = 8, col = colors[1], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_001, col = colors[1], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_002 <- c(0.81, 0.848095, 0.885714, 0.929762, 0.932857, 0.931429, 0.923571, 0.926429, 0.920238)
par(new = TRUE)
plot(lambda, p_002, pch = 8, col = colors[2], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_002, col = colors[2], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_004 <- c(0.795, 0.850238, 0.879524, 0.924286, 0.93881, 0.94, 0.925238, 0.91881, 0.916667)
par(new = TRUE)
plot(lambda, p_004, pch = 8, col = colors[3], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_004, col = colors[3], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_008 <- c(0.774048, 0.84619, 0.87381, 0.919286, 0.94119, 0.937381, 0.933095, 0.925714, 0.919762)
par(new = TRUE)
plot(lambda, p_008, pch = 8, col = colors[4], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_008, col = colors[4], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_016 <- c(0.732619, 0.835, 0.861905, 0.907381, 0.94119, 0.940952, 0.935476, 0.930952, 0.925714)
par(new = TRUE)
plot(lambda, p_016, pch = 8, col = colors[5], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_016, col = colors[5], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
degree <- 1:15
acc <- c(0.906667, 0.925, 0.930238, 0.918333, 0.930952, 0.930238, 0.930476, 0.942619, 0.930714, 0.940238,
0.92119, 0.927143, 0.92, 0.93119, 0.929762)
par(new = TRUE)
plot(degree, acc, pch = 2, col = colors[6], lwd = 2, cex.lab = 1.5, cex.axis = 1.5, axes = F,
ylab = NA, xlab = NA, ylim = c(0.7, 0.95))
axis(side = 3, cex.lab = 1.5, cex.axis = 1.5)
mtext(side = 3, line = 3, text = "Degree", cex = 1.5)
lines(degree, acc, lty = "dashed", col = colors[6], lwd = 2, xlab = NA, ylab = NA, ylim = c(0.7, 0.95))
par(new = TRUE)
lines(degree, rep(0.897143, length(degree)), lty = "dotted", col = "black", lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
legend(x = 8, y = 0.8, legend = c("ALS p=0.01", "ALS p=0.02", "ALS p=0.04", "ALS p=0.08", "ALS p=0.16", "ModPoly", "Raw data"),
lwd = 2, col = c(colors, "black"), pch = c(rep(8, 5), 2), lty = c(rep("solid", 5), "dashed", "dotted"),
cex = 1.5, bty = "n")
legend(x = 8, y = 0.8, legend = c("ALS p=0.01", "ALS p=0.02", "ALS p=0.04", "ALS p=0.08", "ALS p=0.16", "ModPoly", "Raw data"),
lwd = 2, col = c(colors, "black"), pch = c(rep(8, 5), 2, NA), lty = c(rep("solid", 5), "dashed", "dotted"),
cex = 1.5, bty = "n")
lambda <- 2:10
n <- 6
colors <- rainbow(n)
colors
par(mfrow = c(1, 1))
par(mar = c(5, 5, 5, 5))
p_001 <- c(0.816905, 0.858333, 0.894524, 0.930238, 0.935238, 0.93381, 0.920714, 0.915952, 0.91619)
plot(lambda, p_001, pch = 8, col = colors[1], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_001, col = colors[1], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_002 <- c(0.81, 0.848095, 0.885714, 0.929762, 0.932857, 0.931429, 0.923571, 0.926429, 0.920238)
par(new = TRUE)
plot(lambda, p_002, pch = 8, col = colors[2], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_002, col = colors[2], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_004 <- c(0.795, 0.850238, 0.879524, 0.924286, 0.93881, 0.94, 0.925238, 0.91881, 0.916667)
par(new = TRUE)
plot(lambda, p_004, pch = 8, col = colors[3], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_004, col = colors[3], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_008 <- c(0.774048, 0.84619, 0.87381, 0.919286, 0.94119, 0.937381, 0.933095, 0.925714, 0.919762)
par(new = TRUE)
plot(lambda, p_008, pch = 8, col = colors[4], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_008, col = colors[4], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
p_016 <- c(0.732619, 0.835, 0.861905, 0.907381, 0.94119, 0.940952, 0.935476, 0.930952, 0.925714)
par(new = TRUE)
plot(lambda, p_016, pch = 8, col = colors[5], ylim = c(0.7, 0.95), lwd = 2, cex.lab = 1.5, cex.axis = 1.5,
xlab = expression(lambda), ylab = "Accuracy")
lines(lambda, p_016, col = colors[5], lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
degree <- 1:15
acc <- c(0.906667, 0.925, 0.930238, 0.918333, 0.930952, 0.930238, 0.930476, 0.942619, 0.930714, 0.940238,
0.92119, 0.927143, 0.92, 0.93119, 0.929762)
par(new = TRUE)
plot(degree, acc, pch = 2, col = colors[6], lwd = 2, cex.lab = 1.5, cex.axis = 1.5, axes = F,
ylab = NA, xlab = NA, ylim = c(0.7, 0.95))
axis(side = 3, cex.lab = 1.5, cex.axis = 1.5)
mtext(side = 3, line = 3, text = "Degree", cex = 1.5)
lines(degree, acc, lty = "dashed", col = colors[6], lwd = 2, xlab = NA, ylab = NA, ylim = c(0.7, 0.95))
par(new = TRUE)
lines(degree, rep(0.897143, length(degree)), lty = "dotted", col = "black", lwd = 2, cex.lab = 1.5, cex.axis = 1.5)
legend(x = 8, y = 0.8, legend = c("ALS p=0.01", "ALS p=0.02", "ALS p=0.04", "ALS p=0.08", "ALS p=0.16", "ModPoly", "Raw data"),
lwd = 2, col = c(colors, "black"), pch = c(rep(8, 5), 2, NA), lty = c(rep("solid", 5), "dashed", "dotted"),
cex = 1.5, bty = "n")
?aggregate
?read.csv
?write.table
?gl
library(datasets)
head(airquality)
str(airquality)
hilbert <- function(n) {}
hilbert <- function(n) { i <- 1:n}
hilbert <- function(n) {
i <- 1:n
1 / outer(i-1, i, "+")}
x <- hilbert(1000)
system.time(svd(x))
set.seed(1)
rpois(5, 2)
load("C:/Users/zuoyi/Documents/Github/INDEED/data/Met_GU.rda")
dim(Met_GU)
trace(utils:::unpackPkgZip, edit=TRUE)
install.packages("caTools")
install.packages("rprojroot")
install.packages("rmarkdown")
library("caTools", lib.loc="~/R/win-library/3.4")
detach("package:caTools", unload=TRUE)
install.packages("roxygen2")
install.packages("glasso")
shiny::runApp('SVN/SERS_explorer')
knitr::opts_chunk$set(echo = TRUE)
getwd()
data <- read.csv("./activity.csv")
data <- read.csv("./Data/activity.csv")
head(data)
tail(data)
summary(data)
head(data)
data$date <- as.Date(data$date, format = "%Y-%m-%d")
split(data, data$date)
test <- sapply(split(data, data$date), function(x) {sum(x$steps)})
unique(data$date)
hist(total_steps$total_steps)
total_steps_per_day <- sapply(split(data, data$date), function(x) {sum(x$steps)})
summary(total_steps_per_day)
total_steps <- data.frame(total_steps = total_steps_per_day, date = unique(data$date))
summary(total_steps)
hist(total_steps$total_steps)
hist(total_steps$total_steps, breaks = 10, xlab = "Total steps per day",
main = "Histogram of total steps per day")
rug(total_steps$total_steps)
hist(total_steps$total_steps, breaks = 15, xlab = "Total steps per day",
main = "Histogram of total steps per day")
rug(total_steps$total_steps)
hist(total_steps$total_steps, breaks = 20, xlab = "Total steps per day",
main = "Histogram of total steps per day")
rug(total_steps$total_steps)
length(total_steps)
length(total_steps$date)
?mean
summary(data$interval)
2355/5
472/61
471/61
2355/5+1
17568/61
data$interval[1:1000]
tail(data$interval)
mean_steps_per_interval <- sapply(split(data, data$interval), function(x) {mean(x$steps)})
mean_steps_interval <- data.frame(mean_steps = mean_steps_per_day, interval = unique(data$interval))
mean_steps_per_interval <- sapply(split(data, data$interval), function(x) {mean(x$steps)})
mean_steps_interval <- data.frame(mean_steps = mean_steps_per_interval, interval = unique(data$interval))
rownames(mean_steps_interval) <- 1:length(mean_steps_interval$interval)
mean_steps_interval
mean_steps_per_interval <- sapply(split(data, data$interval), function(x) {mean(x$steps, na.rm = T)})
mean_steps_interval <- data.frame(mean_steps = mean_steps_per_interval, interval = unique(data$interval))
rownames(mean_steps_interval) <- 1:length(mean_steps_interval$interval)
mean_steps_interval
plot(mean_steps_interval$interval, mean_steps_interval$mean_steps)
which.max(mean_steps_interval$mean_steps)
# which interval
mean_steps_interval$mean_steps[which.max(mean_steps_interval$mean_steps)]
mean_steps_interval$interval[which.max(mean_steps_interval$mean_steps)]
summary(data)
sum(is.na(data$steps))
sum(is.na(data$steps))/length(data$steps)
which(is.na(data$steps))
index_NA <- which(is.na(data$steps))
interval_NA <- data$interval(index_NA)
interval_NA <- data$interval[index_NA]
index_interval_NA <- sapply(interval_NA, function(x) {which(mean_steps_interval$interval == x)})
impute_NA <- mean_steps_interval$mean_steps[index_interval_NA]
total_steps_per_day_impute <- sapply(split(data_impute, data_impute$date), function(x) {sum(x$steps)})
data_impute <- data
data_impute$steps[index_NA] <- impute_NA
summary(data_impute)
total_steps_per_day_impute <- sapply(split(data_impute, data_impute$date), function(x) {sum(x$steps)})
total_steps_impute <- data.frame(total_steps = total_steps_per_day_impute, date = unique(data_impute$date))
rownames(total_steps_impute) <- 1:length(total_steps_impute$date)
total_steps_impute
plot(total_steps$date, total_steps_impute)
plot(total_steps$date, total_steps$total_steps)
plot(total_steps$date, total_steps$total_steps, pch = 19, color = "red")
lines(total_steps$date, total_steps$total_steps, color = "red")
plot(total_steps$date, total_steps$total_steps, pch = 19, col = "red")
lines(total_steps$date, total_steps$total_steps, col = "red")
plot(total_steps_impute$date, total_steps_impute$total_steps, pch = 19, col = "blue")
lines(total_steps_impute$date, total_steps_impute$total_steps, col = "blue")
plot(total_steps$date, total_steps$total_steps, pch = 19, col = "red", ylim = c(0, 22000))
lines(total_steps$date, total_steps$total_steps, col = "red")
plot(total_steps$date, total_steps$total_steps, pch = 19, col = "red", ylim = c(0, 22000))
lines(total_steps$date, total_steps$total_steps, col = "red")
points(total_steps_impute$date, total_steps_impute$total_steps, pch = 19, col = "blue")
lines(total_steps_impute$date, total_steps_impute$total_steps, col = "blue")
plot(total_steps$date, total_steps$total_steps, pch = 19, col = "red", ylim = c(0, 22000))
lines(total_steps$date, total_steps$total_steps, col = "red")
plot(total_steps$date, total_steps$total_steps, pch = 19, col = "red", ylim = c(0, 22000))
lines(total_steps$date, total_steps$total_steps, col = "red")
points(total_steps_impute$date, total_steps_impute$total_steps, pch = 19, col = "blue")
lines(total_steps_impute$date, total_steps_impute$total_steps, col = "blue")
plot(total_steps$date, total_steps$total_steps, pch = 19, col = "red", ylim = c(0, 22000))
lines(total_steps$date, total_steps$total_steps, col = "red")
points(total_steps_impute$date, total_steps_impute$total_steps, pch = 19, col = "blue")
lines(total_steps_impute$date, total_steps_impute$total_steps, col = "blue")
g <- ggplot(total_steps, aes(date, total_steps))
library(ggplot2)
g <- ggplot(total_steps, aes(date, total_steps))
g + geom_point()
g + geom_point() + geom_line()
g1 <- ggplot(total_steps, aes(date, total_steps))
g1 + geom_point() + geom_line()
g2 <- ggplot(total_steps_impute, aes(date, total_steps))
g2 + geom_point() + geom_line()
shiny::runApp('SVN/SERS_explorer')
install.packages("scidb")
library("scidb")
runApp('SVN/SERS_explorer')
runApp('SVN/SERS_explorer')
install.package("DiagrammeR")
install.packages("DiagrammeR")
runApp('SVN/SERS_explorer')
install.packages("jose")
runApp('SVN/SERS_explorer')
runApp('SVN/SERS_explorer')
runApp('SVN/SERS_explorer')
knitr::opts_chunk$set(echo = TRUE)
## download data
URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(URL, destfile = "./data/data.csv", method="curl")
download.file(URL, destfile = "./data/data.csv")
## check if data folder exists
if(!file.exists("data")) {
dir.create("data")
}
download.file(URL, destfile = "./data/data.csv")
download.file(URL, destfile = "./data/data.csv.bz2")
## read in data
data <- read.csv("./data/data.csv.bz2")
summary(data)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:\\Users\\zuoyi\\Documents\\Github\\datasciencecoursera\\Reproducible Research\\Course Project2")
getwd()
## read in data
data <- read.csv("./data/data.csv.bz2")
## split dataframe according to EVTYPE
data_EVTYPE <- split(c(data$FATALITIES, data$INJURIES), data$EVTYPE)
## compute sum of fatalities for each event
EVTYPE_fatalities <- sapply(data_EVTYPE, function(x) {sum(x$FATALITIES)})
## split dataframe according to EVTYPE
data_EVTYPE <- split(data[,c("FATALITIES", "INJURIES")], data$EVTYPE)
## compute sum of fatalities for each event
EVTYPE_fatalities <- sapply(data_EVTYPE, function(x) {sum(x$FATALITIES)})
## compute sum of injuries for each event
EVTYPE_injuries <- sapply(data_EVTYPE, function(x) {sum(x$INJURIES)})
## prioritize events based on fatalities and injuries
EVTYPE <- names(EVTYPE_fatalities)
# head(EVTYPE)
index <- order(EVTYPE_fatalities, EVTYPE_injuries, decreasing = TRUE)
data_frame_EVTPE <- data.frame(EVTYPE = EVTYPE[index], fatality = EVTYPE_fatalities[index], injuries = EVTYPE_injuries[index])
rownames(data_frame_EVTPE) <- 1:length(EVTYPE)
head(data_frame_EVTPE, 20)
summary(data)
shiny::runApp('SVN/SERS_explorer')
runApp('SVN/SERS_explorer')
runApp('SVN/SERS_explorer')
runApp('SVN/SERS_explorer')
shiny::runApp('SVN/SERS_explorer')
shiny::runApp('SVN/SERS_explorer')
shiny::runApp('SVN/SERS_explorer')
shiny::runApp('SVN/SERS_explorer')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("INDEED", version = "3.8")
library("INDEED")
pre_data <- select_rho_partial(data=Met_GU,class_label = Met_Group_GU,id=Met_name_GU,error_curve = "YES")
head(Met_GU)
library("INDEED", lib.loc="~/R/win-library/3.5")
pre_data <- select_rho_partial(data = Met_GU, class_label = Met_Group_GU, id = Met_name_GU, error_curve = "YES")
pre_data <- pre_partical(data = Met_GU, class_label = Met_Group_GU, id = Met_name_GU, error_curve = "YES")
pre_data <- pre_partial(data = Met_GU, class_label = Met_Group_GU, id = Met_name_GU, error_curve = "YES")
pre_data <- pre_partial(data = Met_GU, class_label = Met_Group_GU, id = Met_name_GU)
detach("package:INDEED", unload=TRUE)
library("INDEED", lib.loc="~/R/win-library/3.5")
remove.packages("INDEED", lib="~/R/win-library/3.5")
devtools::install_github("ressomlab/INDEED")
devtools::install_github("ressomlab/INDEED")
version
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
devtools::install_github("r-lib/devtools")
file.edit('~/.Renviron')
devtools::install_github("r-lib/devtools")
devtools::install_github("ressomlab/INDEED")
devtools::install_github("r-lib/devtools")
devtools::install_github("ressomlab/INDEED")
library("INDEED")
pre_data <- select_rho_partial(data=Met_GU,class_label = Met_Group_GU,id=Met_name_GU,error_curve = "YES")
partial_cor(data_list=pre_data,rho_group1='min',rho_group2="min",permutation = 1000,p_val=pvalue_M_GU,permutation_thres = 0.05)
test <- partial_cor(data_list=pre_data,rho_group1='min',rho_group2="min",permutation = 1000,p_val=pvalue_M_GU,permutation_thres = 0.05)
test_again <- non_partial_cor(data=Met_GU,class_label = Met_Group_GU,id=Met_name_GU,method="spearman",permutation_thres = 0.05)
devtools::install_github("r-lib/devtools")
library(devtools)
has_devel()
library("INDEED", lib.loc="~/R/win-library/3.5")
detach("package:INDEED", unload=TRUE)
library(devtools)
library(devtools)
has_devel()
library(devtools)
has_devel()
?has_devel
test <- has_devel()
devtools::load_all()
setwd("C:\\Users\\zuoyi\\Documents\\Github\\INDEED")
devtools::load_all()
install.packages("testthat")
library("testthat")
devtools::load_all()
remove.packages("INDEED", lib="~/R/win-library/3.5")
devtools::load_all()
library("INDEED")
?INDEED
?INDEED
#' @section non_partial_cor function:
#' non_partial_cor function performs correlation analysis
#' user input data,class label,p-value, sample id,
#' number of permutations, and method(default pearson)
#' p value is optional
#' the result of score table and differential network will be returned
#'
#' @docType package
#' @name INDEED
NULL
library("INDEED")
?INDEED
